---

# access secrets
- hosts: localhost
  vars:
    credstash_table: "credential-store"
    credstash_secrets: 
      - table: "{{credstash_table}}"
        secret: "simple_db.password"
        fact: "simple_aws_dbpass"
        context: "env={{environ}}"
  roles:
  - role: credstash
    secrets: "{{credstash_secrets}}"

  post_tasks:
    - debug: msg="{{simple_aws_dbpass}}"

# rds stack
- hosts: localhost
  gather_facts: false
  tasks:
    - include_vars: vars/main.yml
    - name: Launch MySQL RDS
      cloudformation:
        stack_name: "simpleinvoice-{{ target_counter }}-mysql-rds-stack"
        state: present
        region: us-east-1
        template: templates/pg-rds-us-east-1.json
        template_parameters:
          Environment: "{{ environ }}"
          Application: "simpleinvoice"
          applicationShortName: "si"
          counter: "{{ target_counter }}"
          masterPass: "{{ simple_aws_dbpass }}"
          instanceClass: "{{ instance_class }}"
          allocatedStorage: "{{ alloc_storage }}"
          storageEncrypted: "{{ true|bool }}"
        tags:
          "stellar:env": "{{ environ }}"
          "stellar:unit": techops
          "stellar:product": "simpleinvoice"
          "stellar:owner": "simplyadrian@gmail.com"
          "stellar:hours_of_operation": "0000-2359"

# long lived load balancer stack
- hosts: localhost
  gather_facts: false
  vars:
    frontelb_health_check_target: TCP:8080
    frontelb_zone_name: "stellarkeysandremotes.com"
    frontelb_dns_name: "invoice.stellarkeysandremotes.com"
    frontelb_stack_name: "simpleinvoice-elb{% if stack_num is defined %}-{{stack_num|default(1)}}{% endif %}"
    frontelb_scheme: external
    frontelb_listeners:
        - instancePort: 8080
          instanceProtocol: "https"
          port: 443
          protocol: "https"
          allowed:
            - 0.0.0.0/0
    tags:
      'stellar:product': "simpleinvoice"
      'stellar:env': "{{ environ }}"
      'stellar:unit': techops
      'stellar:owner': "simplyadrian@gmail.com"
      'stellar:hours_of_operation': "0000-2359"
      'Name': "stellar-server"
  roles:
  - frontelb

# ec2 application stack
- hosts: localhost
  gather_facts: false
  vars:
    credstash_keys: ' { "dynamodb:LeadingKeys": ["simple.*", "{simple_db.*"] }'
                    #^ this space is significant, see https://github.com/ansible/ansible/issues/11963
    s3_prefix: "{{environ}}/simple"
    s3_arn: "arn:aws:s3:::stellar-build-deploy"
    playbook_version: "{{ lookup('env','STELLAR_PB_VERSION') }}"
    load_balancer_stack: "simpleinvoice-elb"
    stack_name: "simple-server-{{ playbook_version|regex_replace('\\.', '-' ) }}{% if app_stack_num is defined %}-s{{ app_stack_num }}{% endif %}"
    group: app-1
    ansible_archive: "https://stellar-build-deploy.s3.amazonaws.com/ansible/ansible-pb-stellar-{{ playbook_version }}.tgz"
    image_type: "m3.medium"
    image_group: ubuntu14
    instance_volume:
     - name: '/dev/sda1'
       size: '50'
       type: 'gp2'
       delete_on_term: true
    keypair_name: "prod-pmpserver"
    stack_wait_condition_timeout: 3600
    ansible_playbooks: deploy.yml
    ansible_extra_vars: |
      ---
      playbook_version: "{{ playbook_version }}"
      environ: "{{ environ }}"
      settings_secret_version: "{{ lookup('env', 'PMP_SECRET_VERSION') }}"
      simpleinvoice_local_install: false
      simpleinvoice_aws_dbhost: "{{ mysqlrds_stack.outputs.Endpoint }}"
      simpleinvoice_aws_dbport: "{{ mysqlrds_stack.outputs.Port }}"
    ansible_inventory: |
      [simpleinvoiceserver]
      localhost ansible_connection=local
      [pmpserver:vars]
      environ="{{environ}}"
      playbook_version="{{playbook_version}}"
    stack_instance_tags:
      "stellar:owner": "simplyadrian@gmail.com"
      "stellar:unit": "techops"
      "stellar:hours_of_operation": "0000-2359"
      "stellar:product": "simpleinvoice"
      "Name": "simpleinvoice-server"
    instance_security_groups: "{{ standard_security_groups }}"
    instance_policies:
      s3:
        statements:
          - effect: Allow
            actions:
              - "s3:*"
            resources:
              - "{{s3_arn}}/{{s3_prefix}}/*"
          - effect: Allow
            actions:
              - "s3:ListAllMyBuckets"
            resources:
              - "arn:aws:s3:::*"
          - effect: Allow
            actions:
              - "s3:ListBucket"
            resources:
              - "{{s3_arn}}"
          - effect: Allow
            actions:
              - "s3:PutObject"
            resources:
              - "arn:aws:s3:::stellar-build-deploy/*"
      kms_secrets_ddb:
        statements:
          - effect: Allow
            actions:
              - "kms:Decrypt"
            resources:
              - "arn:aws:kms:{{ region }}:{{ aws_account_number }}:key/{{ regions[region].vpc_environments[environ].credstash_key_id }}"
          - effect: Allow
            actions:
              - "dynamodb:Query"
              - "dynamodb:GetItem"
            resources:
              - "arn:aws:dynamodb:{{ region }}:{{ aws_account_number }}:table/{{ regions[region].vpc_environments[environ].credstash_table }}"
            condition:
              "ForAllValues:StringLike": "{{credstash_keys}}"

  pre_tasks:
    - cloudformation_lookup:
        stack: "simpleinvoice-{{ target_counter }}-mysql-rds-stack"
      register: mysqlrds_stack
    - set_fact:
        simpleinvoice_aws_dbhost:
          - "{{ mysqlrds_stack.outputs.Endpoint }}"
        simpleinvoice_aws_dbport:
          - "{{ mysqlrds_stack.outputs.Port }}"
        instance_security_groups:
          - "{{ standard_security_groups | join(' ') }}"
          - "{{ mysqlrds_stack.outputs.SecurityGroupId }}"

  roles:
    - stack
